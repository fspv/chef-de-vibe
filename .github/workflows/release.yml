name: Create Releases

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
    paths-ignore:
      - '**/*.md'

jobs:
  build-docker:
    uses: ./.github/workflows/docker-build-push.yml
    secrets: inherit
    
  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: false
          - target: x86_64-apple-darwin
            os: macos-13
            cross: false
          - target: aarch64-apple-darwin
            os: macos-14
            cross: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend
      
    - name: Build frontend
      run: npm run build
      working-directory: frontend
      
    - name: Install musl tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
        
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        
    - name: Install cross
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross
      
    - name: Build binary
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          RUSTFLAGS='-C target-feature=+crt-static' cargo build --release --target ${{ matrix.target }}
        elif [[ "${{ matrix.cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
        
    - name: Prepare binary
      run: |
        mkdir -p artifacts
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/chef-de-vibe.exe artifacts/chef-de-vibe-${{ matrix.target }}.exe
        else
          cp target/${{ matrix.target }}/release/chef-de-vibe artifacts/chef-de-vibe-${{ matrix.target }}
        fi
        
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.target }}
        path: artifacts/*
        retention-days: 7
    
  create-release:
    runs-on: ubuntu-latest
    needs: [build-docker, build-binaries]
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: binary-*
        path: binaries/
        merge-multiple: true
        
    - name: Get commit info
      id: commit
      run: |
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "message=$(git log -1 --pretty=%B | head -n1)" >> $GITHUB_OUTPUT
        echo "date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
        
    - name: Check if tag
      id: check_tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "is_tag=true" >> $GITHUB_OUTPUT
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "is_tag=false" >> $GITHUB_OUTPUT
          echo "tag_name=pre-${{ steps.commit.outputs.sha }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate release notes
      id: notes
      run: |
        if [[ "${{ steps.check_tag.outputs.is_tag }}" == "true" ]]; then
          # For tagged releases, get changes since last tag
          LAST_TAG=$(git tag --sort=-version:refname | grep -v "^pre-" | head -n2 | tail -n1 || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD)
          else
            CHANGES=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi
        else
          # For pre-releases, just show the current commit
          CHANGES="- ${{ steps.commit.outputs.message }} (${{ steps.commit.outputs.sha }})"
        fi
        
        if [[ "${{ steps.check_tag.outputs.is_tag }}" == "true" ]]; then
          DOCKER_IMAGE="nuhotetotniksvoboden/chef-de-vibe:${{ steps.check_tag.outputs.tag_name }}"
        else
          DOCKER_IMAGE="nuhotetotniksvoboden/chef-de-vibe:pre-${{ steps.commit.outputs.sha }}"
        fi
        
        if [[ "${{ steps.check_tag.outputs.is_tag }}" == "true" ]]; then
          cat << EOF > release_notes.md
        ## üê≥ Docker Image
        
        \`\`\`bash
        docker pull ${DOCKER_IMAGE}
        docker run -p 8080:8080 ${DOCKER_IMAGE}
        \`\`\`
        
        **Docker Hub:** https://hub.docker.com/r/nuhotetotniksvoboden/chef-de-vibe/tags
        
        ## üì¶ Binary Downloads
        
        Pre-compiled binaries are available for multiple platforms:
        
        - **Linux (x86_64)**: \`chef-de-vibe-x86_64-unknown-linux-gnu\`
        - **Linux (x86_64, static/musl)**: \`chef-de-vibe-x86_64-unknown-linux-musl\` - Works on any Linux without GLIBC dependency
        - **macOS (Intel)**: \`chef-de-vibe-x86_64-apple-darwin\`
        - **macOS (Apple Silicon)**: \`chef-de-vibe-aarch64-apple-darwin\`
        
        ## Changes
        
        ${CHANGES}
        
        ---
        Built from commit: \`${{ steps.commit.outputs.sha }}\`  
        Build date: ${{ steps.commit.outputs.date }}
        EOF
        else
          cat << EOF > release_notes.md
        ## üê≥ Docker Image
        
        This pre-release contains the latest development build from commit [\`${{ steps.commit.outputs.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}).
        
        ### Quick Start
        \`\`\`bash
        docker pull ${DOCKER_IMAGE}
        docker run -p 8080:8080 ${DOCKER_IMAGE}
        \`\`\`
        
        ### üîó Links
        - **üì¶ [View on Docker Hub](https://hub.docker.com/r/nuhotetotniksvoboden/chef-de-vibe/tags?name=pre-${{ steps.commit.outputs.sha }})**
        - **üè∑Ô∏è [All Tags](https://hub.docker.com/r/nuhotetotniksvoboden/chef-de-vibe/tags)**
        - **üíª [Source Code](https://github.com/${{ github.repository }}/tree/${{ github.sha }})**
        
        ## üì¶ Binary Downloads
        
        Pre-compiled binaries are available for multiple platforms:
        
        - **Linux (x86_64)**: \`chef-de-vibe-x86_64-unknown-linux-gnu\`
        - **Linux (x86_64, static/musl)**: \`chef-de-vibe-x86_64-unknown-linux-musl\` - Works on any Linux without GLIBC dependency
        - **macOS (Intel)**: \`chef-de-vibe-x86_64-apple-darwin\`
        - **macOS (Apple Silicon)**: \`chef-de-vibe-aarch64-apple-darwin\`
        
        ## Changes
        
        ${CHANGES}
        
        ---
        **‚ö†Ô∏è Pre-release Notice:** This is an automated pre-release build for testing purposes.  
        Built from commit: [\`${{ steps.commit.outputs.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})  
        Build date: ${{ steps.commit.outputs.date }}
        EOF
        fi
        
    - name: Create pre-release
      if: steps.check_tag.outputs.is_tag == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.check_tag.outputs.tag_name }}
        name: "Pre-release ${{ steps.commit.outputs.sha }}"
        body_path: release_notes.md
        files: binaries/*
        prerelease: true
        make_latest: false
        
    - name: Create release
      if: steps.check_tag.outputs.is_tag == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.check_tag.outputs.tag_name }}
        name: "Release ${{ steps.check_tag.outputs.tag_name }}"
        body_path: release_notes.md
        files: binaries/*
        prerelease: false
        make_latest: true
